trigger:
- main

variables:
  dockerRegistryServiceConnection: 'ACR–TodoApp'
  azureServiceConnection: 'Azure–Todo-App'
  acrLoginServer: 'todocrdev123.azurecr.io'
  imageRepositoryBackend: 'todolist-backend'
  dockerfilePathBackend: '$(Build.SourcesDirectory)/backend/Dockerfile'
  containerAppName: 'todo-api-capp-dev'
  containerAppResourceGroup: 'rg-todo-dev'
  staticWebAppName: 'todoapp-swa-dev'
  staticWebAppAppLocation: 'frontend'
  staticWebAppOutputLocation: 'dist'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build Backend and Frontend
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build backend image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepositoryBackend)
        command: build
        Dockerfile: $(dockerfilePathBackend)
        tags: |
          $(tag)

    - script: |
        cd $(staticWebAppAppLocation)
        npm install
        npm run build
      displayName: Build frontend static files

- stage: Push
  displayName: Push Backend Image to ACR
  dependsOn: Build
  jobs:
  - job: PushBackend
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Push backend image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepositoryBackend)
        command: push
        tags: |
          $(tag)

- stage: Deploy
  displayName: Deploy Backend and Frontend
  dependsOn: Push
  jobs:
  - job: DeployBackend
    displayName: Deploy to Azure Container App
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az config set extension.use_dynamic_install=yes_without_prompt

          echo "Deploying backend container..."
          az containerapp update \
            --name $(containerAppName) \
            --resource-group $(containerAppResourceGroup) \
            --image $(acrLoginServer)/$(imageRepositoryBackend):$(tag) \
            --cpu 0.5 \
            --memory 1.0Gi

  - job: DeployFrontend
    displayName: Deploy to Azure Static Web App
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureStaticWebApp@0
      inputs:
        app_location: $(staticWebAppAppLocation)
        output_location: $(staticWebAppOutputLocation)
        azure_static_web_apps_api_token: $(deployment_token)

